export type MyJQuery = {
    (html: JQuerySeletor): MyJQuery;
    length : number;
    each(fn: {(i:number, item: any): any}): MyJQuery;
    eq(i: number): MyJQuery;
    add(item: Element): MyJQuery;
    find(selector: string): MyJQuery;
    children(selector?: string): MyJQuery;
    parent(selector?: string): MyJQuery;
    append(child: JQuerySeletor): MyJQuery;
    appendTo(parent: JQuerySeletor): MyJQuery;
    prepend(child: JQuerySeletor): MyJQuery;
    prependTo(parent: JQuerySeletor): MyJQuery;
    after(child: JQuerySeletor): MyJQuery;
    insertAfter(parent: JQuerySeletor): MyJQuery;
    before(child: JQuerySeletor): MyJQuery;
    insertBefore(parent: JQuerySeletor): MyJQuery;
    clone(): MyJQuery;
    remove(): MyJQuery;
    data(key: string, value: any): MyJQuery;
    data(key: string): any;
    attr(key: string, value: string | number | null): MyJQuery;
    attr(key: string): string | number | null;
    removeAttr(key: string): MyJQuery;
    addClass(className: string): MyJQuery;
    removeClass(className: string): MyJQuery;
    hasClass(className: string): boolean;
    toggleClass(className: string): MyJQuery;
    prop(key: string, value: string): MyJQuery;
    prop(key): any;
    html(value: string): MyJQuery;
    html(): string;
    text(value: string): MyJQuery;
    text(): string;
    val(value: string): MyJQuery;
    val(): string;
    hide(): MyJQuery;
    show(): MyJQuery;
    css(key: string, value: string): MyJQuery;
    css(key: string): string;
    on(eventName: string, fn: Function): MyJQuery;
    off(eventName: string, fn: Function): MyJQuery;
    toggle(eventName: string): MyJQuery;
}
export type JQuerySeletor = string | {length: number} | Element | DocumentFragment